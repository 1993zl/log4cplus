Short Description
=================

log4cplus is a simple to use C++ logging API providing thread-safe,
flexible, and arbitrarily granular control over log management and
configuration.  It is modeled after the Java log4j API.


Latest Project Information
==========================

The latest up-to-date information for this project can be found at
http://log4cplus.sourceforge.net.  Please submit bugs, patches,
feature requests, etc. there.


Tested on the following platforms
=================================

- Linux/AMD64 with GCC 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5)
- Linux/AMD64 with Sun C++ 5.12 Linux_i386 2011/11/16
- Linux/AMD64 with Clang version 3.0-6ubuntu3 (tags/RELEASE_30/final)
  (based on LLVM 3.0)
- FreeBSD/AMD64 with GCC 3.4.6, 4.2.1 and 4.3.3
- Windows 7 with MS Visual C++ 10.0
- OpenSolaris 5.11 with Sun C++ 5.10 SunOS_i386 128229-02 2009/09/21,
  with -library=stlport4
- Solaris 5.10 with Sun C++ 5.8 2005/10/13, with -library=stlport4
- NetBSD 5.0.2/AMD64 with GCC 4.1.3 20080704 prerelease (NetBSD nb2
  20081120)
- OpenBSD 5.0/AMD64 with GCC 4.2.1 20070719


Notes
=====

Cygwin/MinGW
------------

Some version of GCC (3.4.x and probably some of 4.x series too) on
Windows (both Mingw and Cygwin) produces lots of warnings of the form
"warning: inline function 'void foo()' is declared as dllimport:
attribute ignored."  This can be worked around by adding
-Wno-attributes option to GCC command.  Unfortunatelly, not all
affected version of GCC have this option.


Threads and signals
-------------------

log4cplus is not safe to be used from async signals' handlers.  This
is a property of most threaded programmes in general.  If you are
going to use log4cplus in threaded application and if you want to use
log4cplus from signal handlers then your only option is to block
signals in all threads but one that will handle all signals.  On POSIX
platforms, this is possible using the sigwait() call.  log4cplus
enables this approach by blocking all signals in any threads created
through its threads helpers.


AIX
---

There appears to be a reentracy problem with AIX 5.3 and xlC 8 which
can result into a deadlock condition in some curcumstances. It is
unknown whether the problem manifests with other versions of either
the OS or the compiler, too. The problem was initially reported in a
bug report #3056687 ([1]).

The core of the problem is that IBM's/xlC's standard C++ IOStreams
implementation uses global non recursive lock to protect some of its
state. The application in the bug report was trying to do logging
using log4cplus from inside overflow() member function of a class
derived from std::streambuf class. log4cplus itself uses
std::ostringstream. This resulted into an attempt to recursivly lock
the global non recursive lock and a deadlock.

[1] <https://sourceforge.net/tracker/?func=detail&aid=3056687&group_id=40830&atid=429073>


Solaris Studio
--------------

Solaris Studio compilers' default standard C++ library is very
non-standard. log4cplus requires better conforming standard library
than the default Cstd library. This means that log4cplus' configure
script automatically adds '-library=stlport4' to compiler command
line.


Solaris Studio on GNU/Linux
---------------------------

The autotools and our configure.in combo does not handle Solaris
Studio compiler on Linux well enough and needs a little help with
configuration of POSIX threads:

$ COMMON_FLAGS="-L/lib/x86_64-linux-gnu/ -L/usr/lib/x86_64-linux-gnu/ \
-mt=yes -O"

$ ../configure --enable-threads=yes CC=/opt/solarisstudio12.3/bin/cc \
CXX=/opt/solarisstudio12.3/bin/CC CFLAGS="$COMMON_FLAGS" \
CXXFLAGS="$COMMON_FLAGS" LDFLAGS="-lpthread"


Qt / Win32 / MSVC
-----------------

In order to use log4cplus in Qt programs it is necessary to set
following option:

Treat WChar_t As Built in Type: No (/Zc:wchar_t-)

Set this option for log4cplus project and Qt4DebugAppender project in
MS Visual Studio. Remember to use Unicode versions of log4cplus
libraries with Qt. It is also necessary to make clear distinction
between debug and release builds of Qt project and log4cplus. Do not
use log4cplus release library with debug version of Qt program or vice
versa.

For registering Qt4DebugAppender library at run-time call this method:

log4cplus::Qt4DebugAppender::registerAppender() ;

Add these lines to qmake project file for using log4cplus and
Qt4DebugAppender:

INCLUDEPATH += C:\log4cplus\include
win32 {
    CONFIG(debug, debug|release) {
        LIBS += -LC:\log4cplus\msvc10\Win32\bin.Debug_Unicode -llog4cplusUD
        LIBS += -LC:\log4cplus\msvc10\Win32\bin.Debug_Unicode -llog4cplus-Qt4DebugAppender
    } else {
        LIBS += -LC:\log4cplus\msvc10\Win32\bin.Release_Unicode -llog4cplusU
        LIBS += -LC:\log4cplus\msvc10\Win32\bin.Release_Unicode -llog4cplus-Qt4DebugAppender
    }
}


Unsupported compilers
---------------------

log4cplus does not support too old and broken C++ compilers:

- Visual C++ prior to 7.1
- GCC prior to 3.2
- All Borland/CodeGear/Embarcadero C++ compilers


Unsupported platforms
---------------------

log4cplus requires some minimal set of C and/or C++ library
functions. Some systems/platforms fail to provide these functions and
thus log4cplus cannot be supported there:

- Windows CE - missing implementations of <time.h> functions


License
=======

This library is licensed under the Apache Public License 2.0 and two
clause BSD license.  Please read the included LICENSE file for
details.
