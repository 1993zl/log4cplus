log4cplus 1.1.0-RC5

- Fixed compilation for build with wchar_t being alias to unsigned
  short (Windows).

- Added new appender CLFSAppender (experimental), based on Microsoft
  Common Log File System API.


log4cplus 1.1.0-RC5

- Fixed single threaded log4cplus build issues.

- Added ability to log to std::cerr (Andreas Bießmann).

- Fixed disabling of LOG4CPLUS_*_FMT() macros.


log4cplus 1.1.0-RC4

IMPORTANT: Compilation with Solaris Studio now depends on STLPort
           (-library=stlport4 switch). The default Cstd library is not
           conforming enough for use in log4cplus.

- Improved behaviour of log4cplus as a component of larger CMake based
  project (Andreas Bießmann).

- Updated various Autoconf detection scripts in m4/ directory to newer
  versions.

- Fixed some signedness and overflow warnings.

- Improved Autotools build system's behaviour for cross compilation.

- Added detection of C++11 <atomic> header and related
  functions. Implemented SharedObject reference counting using C++11
  atomics where possible.

- Fixed compilation with GCC 4.6 in C++11 mode.

- Fixed some single-threaded compilation and run time issues.

- Fixed bug #3520891 - FileAppender buffering issue.

- Updated to Autoconf 2.69, Automake 1.12 and Libtool 2.4.2.

- Documented build procedure for Solaris Studio.

- Improved support for Solaris Studio in configure.in.


log4cplus 1.1.0-RC3

- Fixed log4cplusS.vcxproj - Added missing source files to the
  project.


log4cplus 1.1.0-RC2

- CMake build system fixes.

- Fixed TTCCLayout double time stamp issue.


log4cplus 1.1.0-RC1

Important changes relative to PRODUCTION_1_0_x branch:

- Added AsyncAppender.

- Added simple C interface for interoperability with C.

- Added inter-process file locking to file appenders to allow logging
  into a single log file from multiple processes.

- Added Mapped Diagnostic Context (MDC) and associated converter (%X).

- Added alternative thread identification (%T) converter to pattern layout.

- Added function name converter (%M).

- Added wchar_t <-> char conversion implementations based on standard
  C locale functions and based on iconv().

- Added DeviceAppender to allow use of Boost.IOStream's Sink as appender.

- Added LOG4CPLUS_*_FMT() macros to allow printf-like formatted output
  where it is possible.

- Logging macros now accept both logger name as string and Logger
  instance as their first parameter.
